https://www.weave.works/blog/kubernetes-beginners-guide/
##########################################################################
###################(Dockerfile sample and tutorial site)####################
##########################################################################
FROM node:4.6
WORKDIR /app
ADD ./app
RUN npm install
EXPOSE 3000
CMD npm start
https://www.digitalocean.com/community/tutorials/docker-explained-using-dockerfiles-to-automate-building-of-images
https://github.com/iraj-norouzi/DockerCheatSheet

docker run -p 3000:3000 -t 


##########################################################################
####################################(POD)###################################
##########################################################################
apiVersion: v1
kind: Pod
metadata:
  name: web-server
  labels:
    app: helloworld
spec:
  containers:
  - name: nginx-igap
    image: nginx
    ports:
    - name: nginx-port
      containerPort: 80


kubernetes cheat sheet 
https://kubernetes.io/docs/reference/kubectl/cheatsheet/

k create -f   first-app/helloworld.yml
kubectl port-forward nodehelloworld.example.com  81:80
curl localhost:81

kubectl expose pod web-server --type=NodePort --name web-server-service

##########################################################################
####################################(UsefulCommand)#######################
##########################################################################
kubectl attach web-server -i
kubectl exec pod -- ls /
kubectl run -i --tty busybox --image=busybox -- sh  # Run pod as interactive shell
kubectl describe {pod,service,node,...}  
kubectl get rc    #display replication controller

##########################################################################
####################################(Replication Controller)##############
##########################################################################
if your application is stateless you can horizontally scale it (scale out)
stateless=your application does not have a state, it doesnot write any local file / keeps local sessions
all traditional databases (mysql,postgres) are stateful , they have database files that can't be split over multiple instance(scale up)
Deployments are a newer and higher level concept than Replication Controllers. They manage the deployment of Replica Sets 
(also a newer concept, but pretty much equivalent to Replication Controllers), and allow for easy updating of a Replica Set as well
as the ability to roll back to a previous deployment.
Previously this would have to be done with kubectl rolling-update which was not declarative and did not provide the rollback features.


apiVersion: v1
kind: ReplicationController
metadata:
  name: helloworld-controller
spec:
  replicas: 2
  selector:
    app: helloworld
  template:
    metadata:
      labels:
        app: helloworld
    spec:
      containers:
      - name: k8s-demo
        image: wardviaene/k8s-demo
        ports:
        - name: nodejs-port
          containerPort: 3000


Horizental scale
kubectl scale --replicas=4 -f /root/kubernetes-course/replication-controller/helloworld-repl-controller.yml 
kubectl scale --replicas=4 rc/helloworld-controller
